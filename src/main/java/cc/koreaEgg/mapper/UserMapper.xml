<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cc.koreaEgg.mapper.UserMapper">

    <resultMap id="User" type="User" >
        <result  column="id" property="id" />
        <result  column="base_role" property="baseRole" />
        <result  column="role" property="role" />
        <result  column="role_change" property="roleChange" />
        <result  column="status" property="status" />
        <result  column="user_id" property="userId" />
        <result  column="pwd" property="pwd" />
        <result  column="user_name" property="userName" />
        <result  column="phone" property="phone" />
        <result  column="memo" property="memo" />
        <result  column="birthday" property="birthday" />
        <result  column="shop_id" property="shopId" />
        <result  column="reg_date" property="regDate" />
        <result  column="update_date" property="updateDate" />
        <result  column="expire_date" property="expireDate" />
        <result  column="login_count" property="loginCount" />
        <result  column="login_date" property="loginDate" />
        <result  column="s_id" property="shop.id" />
        <result  column="s_name" property="shop.name" />
        <result  column="s_post_num" property="shop.postNum" />
        <result  column="s_addr" property="shop.addr" />
        <result  column="s_addr_detail" property="shop.addrDetail" />
        <result  column="s_tel" property="shop.tel" />
        <result  column="s_profile_image" property="shop.profileImage" />
        <result  column="s_lon" property="shop.lon" />
        <result  column="s_lat" property="shop.lat" />
        <result  column="s_reg_date" property="shop.regDate" />
        <result  column="s_homepage" property="shop.homepage" />
    </resultMap>

    <sql id="selectUserSql">
        SELECT
            if( IFNULL(currentRole,'USER') = u.base_role , u.base_role, currentRole ) AS role
            ,if( IFNULL(currentRole,'USER') = u.base_role , 0, 1 ) AS role_change
            ,expired AS expire_date
            ,u.*
            ,s.id AS s_id
            ,s.name AS s_name
            ,s.post_num AS s_post_num
            ,s.addr AS s_addr
            ,s.addr_detail AS s_addr_detail
            ,s.tel AS s_tel
            ,s.profile_image AS s_profile_image
            ,s.lon AS s_lon
            ,s.lat AS s_lat
            ,s.reg_date AS s_reg_date
            ,s.homepage AS s_homepage
            FROM USER u left join
            (
            SELECT *, if(expire_date &lt; now(), 'USER' , role ) AS currentRole,
            if(expire_date > now(), expire_date , null ) AS expired
            FROM USER_ROLE_REQ WHERE status=29 AND id in (select max(id) from USER_ROLE_REQ group by user_id)
            ) r on u.id = r.user_id left join SHOP s on u.shop_id = s.id
    </sql>

    <!-- USER TABLE -->
    <select id="selectUserByName" resultMap="User">
        <include refid="selectUserSql" />
        WHERE u.status = 1 AND u.user_name LIKE CONCAT('%',#{userName},'%')
    </select>


    <select id="selectUserByUserId" parameterType="map" resultMap="User">
        <include refid="selectUserSql" />
        WHERE u.status = 1 AND u.user_id = #{userId}
    </select>

    <select id="selectRoleChangeList" resultMap="User">
        <include refid="selectUserSql" />
        WHERE u.status = 1 AND IFNULL(currentRole,'USER') &lt;&gt; u.base_role
    </select>

    <!--유저 전체 검색-->
    <select id="selectAllUser" parameterType="map" resultMap="User">
        <include refid="selectUserSql" />
        WHERE u.status = 1
        <if test="userId!=null and !userId.equals('')">
            AND u.user_id LIKE CONCAT('%',#{userId},'%')
        </if>
        <if test="userName!=null and !userName.equals('')">
            AND u.user_name LIKE CONCAT('%',#{userName},'%')
        </if>
        <if test="phone!=null and !phone.equals('')">
            AND u.phone LIKE CONCAT('%',#{phone},'%')
        </if>
        <if test="shopName!=null and !shopName.equals('')">
            AND s.name LIKE CONCAT('%',#{shopName},'%')
        </if>
        <if test="address!=null and !address.equals('')">
            AND s.addr LIKE CONCAT('%',#{address},'%')
        </if>
        <if test="role!=null and !role.equals('')">
            AND u.base_role = #{role}
        </if>
        ORDER BY id desc
        LIMIT #{cri.pageStart}, #{cri.perPageNum}
    </select>

    <select id="selectCountAllUser" parameterType="map" resultType="int">
        SELECT count(*)
        FROM USER u left join
        (
        SELECT *, if(expire_date &lt; now(), 'USER' , role ) AS currentRole,
        if(expire_date > now(), expire_date , null ) AS expired
        FROM USER_ROLE_REQ WHERE status=29 AND id in (select max(id) from USER_ROLE_REQ group by user_id)
        ) r on u.id = r.user_id left join SHOP s on u.shop_id = s.id
        WHERE u.status = 1
        <if test="userId!=null and !userId.equals('')">
            AND u.user_id LIKE CONCAT('%',#{userId},'%')
        </if>
        <if test="userName!=null and !userName.equals('')">
            AND u.user_name LIKE CONCAT('%',#{userName},'%')
        </if>
        <if test="phone!=null and !phone.equals('')">
            AND u.phone LIKE CONCAT('%',#{phone},'%')
        </if>
        <if test="shopName!=null and !shopName.equals('')">
            AND s.name LIKE CONCAT('%',#{shopName},'%')
        </if>
        <if test="address!=null and !address.equals('')">
            AND s.addr LIKE CONCAT('%',#{address},'%')
        </if>
        <if test="role!=null and !role.equals('')">
            AND u.base_role = #{role}
        </if>
    </select>

    <!--TODO AN 유저등록 UserServiceTest 테스트 만들어놈-->
    <insert id="createUser" parameterType="User">
      INSERT INTO USER (user_id, user_name, pwd, phone, shop_id, reg_date)
      VALUES (#{userId},#{userName},#{pwd},#{phone},#{shopId},NOW())
    </insert>

    <select id="selectUserById" parameterType="long" resultMap="User">
        <include refid="selectUserSql" /> WHERE u.id = #{id}
    </select>

    <select id="selectUserByPhone" parameterType="String" resultMap="User">
        <include refid="selectUserSql" /> WHERE u.phone = #{phone}
    </select>

      <!--TODO AN 비밀번호 찾기용-->
    <update id="updateUserPwd">
        UPDATE USER
        SET pwd = #{pwd}
        WHERE id = #{id}
    </update>

    <update id="updateUser" parameterType="User">
        UPDATE USER
        SET user_name = #{userName}
        , phone = #{phone}
        , memo = #{memo}
        , update_date = NOW()
        WHERE id = #{id}
    </update>

    <update id="updateShop" parameterType="Shop">
        UPDATE SHOP
        SET name = #{name}
        , post_num = #{postNum}
        , addr = #{addr}
        , addr_detail = #{addrDetail}
        , tel = #{tel}
        , lon = #{lon}
        , lat = #{lat}
        , homepage = #{homepage}
        WHERE id = #{id}
    </update>

    <update id="updateUserRole">
        UPDATE USER
        SET base_role = #{role}
        WHERE id = #{id}
        AND base_role != 'ADMIN'
    </update>

    <update id="countUpVisit" parameterType="long">
        UPDATE USER
        SET login_count = login_count+1
        ,login_date = NOW()
        WHERE id = #{id}
    </update>

    <!--TODO AN 유저탈퇴 개인정보만 지우고 status값만 off로 변경?-->
    <update id="deleteUser" parameterType="long">
        UPDATE USER
        SET status = 9
        WHERE id = #{id}
    </update>

    <!-- USER ROLE REQ TABLE -->
    <insert id="createUserRoleReq" parameterType="userRoleReq">
        INSERT INTO USER_ROLE_REQ (user_id, status, role, req_name, deposit, memo,update_date,expire_date, reg_date)
        VALUES (#{userId},#{status},#{role},#{reqName},#{deposit}, #{memo}, #{updateDate}, #{expireDate}, NOW())
    </insert>

    <select id="selectAllUserRoleReqList" parameterType="map" resultType="userRoleReq">
        /*TODO AN 전체 히스토리 가져오기*/
        SELECT * FROM USER_ROLE_REQ
        WHERE 1=1
        <if test="userId neq null">
            AND user_id = #{userId}
        </if>
        <if test="status neq null">
            AND status = #{status}
        </if>
        <if test="reqName neq null">
            AND req_name like concat('%',#{userId},'%')
        </if>
        <if test="startDate neq null">
            AND reg_date &gt;= #{startDate}
        </if>
        <if test="endDate neq null">
            AND reg_date &lt;= #{endDate}
        </if>
        order by id desc
        LIMIT #{cri.pageStart}, #{cri.perPageNum}
    </select>

    <select id="selectCountAllUserRoleReqList" parameterType="map" resultType="int">
        /*TODO AN 전체 히스토리 가져오기*/
        SELECT COUNT(*) FROM USER_ROLE_REQ
        WHERE 1=1
        <if test="userId neq null">
            AND user_id = #{userId}
        </if>
        <if test="status neq null">
            AND status = #{status}
        </if>
        <if test="reqName neq null">
            AND req_name like concat('%',#{userId},'%')
        </if>
        <if test="startDate neq null">
            AND reg_date &gt;= #{startDate}
        </if>
        <if test="endDate neq null">
            AND reg_date &lt;= #{endDate}
        </if>
    </select>

    <update id="updateUserRoleReq">
        UPDATE USER_ROLE_REQ
        SET status = #{status}
        , role = #{role}
        , deposit = #{deposit}
        , req_name = #{reqName}
        , memo = #{memo}
        , update_date = NOW()
        , expire_date = #{expireDate}
        WHERE id = #{id}
    </update>
    <!--, expire_date = DATE_ADD(NOW(),INTERVAL 1,YEAR)-->
    
    <select id="selectUserRoleExp">
        /* TODO AN 한달이내에 만료되는 계정확인 관리자 확인용*/
    </select>

    <select id="selectUserRoleExpMonth">
        /* TODO AN 한달뒤에 만료되는 계정확인 매일 10시쯤 스케쥴 돌려서 문자보낼예정?*/
    </select>

    <!-- 현재기준 유저롤 조회 -->
    <select id="selectCurrentUserRole" parameterType="map" resultType="role">
        select role from USER_ROLE_REQ where user_id = #{userId} and expire_date &lt;  now() order by id desc  limit 1
    </select>

    <insert id="createAuthNum" parameterType="AuthNum">
        INSERT INTO AUTH_NUM (phone, auth_num, reg_date) VALUES (#{phone},#{authNum},NOW())
    </insert>

    <select id="selectAuthNum" parameterType="AuthNum" resultType="AuthNum">
        SELECT * FROM AUTH_NUM
        WHERE phone = #{phone}
        AND auth_num = #{authNum}
        AND reg_date + INTERVAL 3 MINUTE &gt;= NOW()
    </select>

    <insert id="createShop" parameterType="shop">
        INSERT INTO SHOP (name, post_num, addr, addr_detail, tel, profile_image, lon, lat, reg_date, homepage)
        VALUES (#{name},#{postNum},#{addr},#{addrDetail},#{tel},#{profileImage},#{lon},#{lat},NOW(),#{homepage})
        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <resultMap id="Shop" type="Shop">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="postNum" column="post_num"/>
        <result property="addr" column="addr" />
        <result property="addrDetail" column="addr_detail" />
        <result property="tel" column="tel"/>
        <result property="profileImage" column="profile_image"/>
        <result property="lon" column="lon"/>
        <result property="lat" column="lat"/>
        <result property="regDate" column="reg_date"/>
        <result property="homepage" column="homepage"/>
        <collection property="products"  ofType="Product">
            <result property="id" column="p_id" />
            <result property="shopId" column="p_shop_id" />
            <result property="name" column="p_name" />
        </collection>
    </resultMap>

    <select id="selectShopList" parameterType="map" resultMap="Shop">
      SELECT s.*, ST_DISTANCE(POINT(#{lon}, #{lat}), POINT(s.lon, s.lat)) AS dist,
              p.id AS p_id, p.shop_id AS p_shop_id, p.name AS p_name
              FROM SHOP s left join PRODUCT p on p.shop_id = s.id, USER u
              WHERE s.id = u.shop_id
              AND p.visible=1
              AND p.status=11
              AND u.base_role = #{role}
              ORDER BY dist
    </select>

</mapper>